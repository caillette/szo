// PEG.js grammar for Szótárgép
// http://pegjs.majda.cz/online
pack = 
    emptyline* 
    descriptors : descriptors
    globaltags : ( tags emptyline+ )?
    cards : cards 
    { return [ descriptors, globaltags, cards ] }


descriptors 'descriptors' = 
  first : descriptor 
  rest : ( bigbreak+ descriptor : descriptor { return descriptor } )*
  bigbreak*
  { return [ first ].concat( rest ) }

descriptor 'descriptor (key:value)' = 
  name : [0-9a-zA-Z-_]+ ':' value : line { return [ name, value ] }


cards 'Cards' =
  first : card 
  rest : ( bigbreak+ card : card { return card } )*
  bigbreak*
  { return [ first ].concat( rest ) }

card 'Card (tags, questions, answers)'=
  tagline : tagline
  questions : side 
  smallbreak
  answers : side
  { return [ tagline === '' ? [] : tagline, questions, answers ] }

tagline 'Tag line ( @tag1 @tag2 ...)' =
  ' '+ tags : tags { return tags }

tags 'Tags (@tag1 @tag2 ...)' = 
  first : tag
  rest : ( ' '+ tag { return tag } )*
  ' '* smallbreak 
  { return [ first ].concat( rest ) }

tag '("@tagname", separated by spaces)' = 
  '@' name : [0-9a-zA-Z\-_/]+ { return name.join( '' ) }


side =
  first : line
  rest : ( smallbreak ' '+ line : line { return line } )*
  { return [ first ].concat( rest ) }


line = 
    first : character 
    rest : ( 
        space : ' '* 
        c : character { return space.concat( c ).join( '' ) } 
    )* 
    ' '*
    { return first + rest.join( '' ) }

character = [0-9a-zA-Z]

smallbreak = '\n'

bigbreak = '\n' ( ' ' * '\n' )*

emptyline 'empty line' = ' ' * '\n' 