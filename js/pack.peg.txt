// PEG.js grammar for Szótárgép
// http://pegjs.majda.cz/online
pack = 
    emptyline* 
    descriptors : descriptors?
    globaltags : globaltags?
    cards : cards?
    { return [ 
        ( descriptors === '' ? [] : descriptors ), 
        ( globaltags === '' ? [] : globaltags ), 
        ( cards === '' ? [] : cards )
      ] 
    }


descriptors 'descriptors ("key:value", each on one line)' = 
  first : descriptor 
  rest : ( bigbreak+ descriptor : descriptor { return descriptor } )*
  bigbreak*
  { return [ first ].concat( rest ) }

descriptor 'descriptor (key:value)' = 
  name : [0-9a-zA-Z-_]+ ':' ' '* value : line { return [ name.join( '' ), value ] }

globaltags 'Global tags (@T1 @T2 ... ) (on one line, no indent)' = 
  tags : tags bigbreak
  { return tags }

cards 'Cards' =
  first : card 
  rest : ( bigbreak+ card : card { return card } )*
  bigbreak*
  { return [ first ].concat( rest ) }

card 'Card (tags, questions, answers)'=
  tagline : tagline?
  questions : side 
  smallbreak
  answers : side
  { return [ line, tagline === '' ? [] : tagline, questions, answers ] }

tagline 'Tag line ( @tag1 @tag2 ...) (on one line, indented)' =
  ' '+ tags : tags smallbreak
  { return tags }

tags 'Tags (@tag1 @tag2 ...)' = 
  first : tag
  rest : ( ' '+ tag : tag { return tag } )*
  ' '* 
  { return [ first ].concat( rest ) }

tag '("@tagname", separated by spaces)' =
  // Never include '$' that we reserve for magic tag names.
  '@' name : [0-9a-zA-Z\-_]+ { return name.join( '' ) }


side =
  first : line
  rest : ( smallbreak ' '+ line : line { return line } )*
  { return [ first ].concat( rest ) }


line = 
    first : character 
    rest : ( 
        space : ' '* 
        c : character { return space.concat( c ).join( '' ) } 
    )* 
    ' '*
    { return first + rest.join( '' ) }

character = [0-9a-zA-ZáéíóúÁÉÚÍÓÚ????öőüűÜŰÖŐœæàâèêëïîôûùçŒÆÀÂÈÊËÏÎÔÛÙÇß€+’'#Ø~,;!—…–_:*.°/?(){}[\]\-" ]

smallbreak 'Single line break' = '\n'

bigbreak 'One line break or more' = '\n' ( ' ' * '\n' )*

emptyline 'Empty line' = ' ' * '\n' 