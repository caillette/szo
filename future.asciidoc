
== Use tags instead of files

One card may have several tags. Use `@Ppp` as pair tag.

A file may have a global tag `@@Ggg` that affects all contained cards.

A tag may not contain spaces but non-breakable spaces as `_`.

There is a special "tagless" tag to see orphans.

Since we don't see files, there must be a message listing badly-referenced files.

Tag may belong to groups. With `@Foo/Bar` and `@Foo/Baz` somewhere, infer a tag group:

----
[ ] Foo
[ ]   Bar
[ ]   Baz
----


== Content-aware URL

Store current state within the URL instead of using cookies or HTML 5 storage API.

This would have following advantages:

* Support browser's "back" button.
* Store various configurations (through bookmarks or whatever) instead of a single one.

This  http://saadnawaz.blogspot.fr/2010/10/change-url-dynamically-through.html[blog post] tells that one can use `window.location.hash`.

The http://www.boutell.com/newfaq/misc/urllength.html[practical limit] of URL length is 2048 characters. Application state might fit, considering:

* Card count (see below).
* Tag count (see below).
* Compression.
* Dropping some state (like the "deck" described below).

100 selected tags of an average length of 20 barely fit. Hierarchical selection can reduce the number of selected tags.

Keeping the deck makes sense only when refreshing the page (not even sure). As a matter of fact, deck deals with user's short term memory. So we have some "session" scope that can go outside of the URL. The good choice isn't obvious here because we don't know how to deal with URL copy-paste.


== Link to Wiktionary

Links to Wiktionary only appear in a card detail.

Many words do appear on Wiktionary, http://hu.wiktionary.org/wiki/szilva[through] http://en.wiktionary.org/wiki/szilva[various] http://fr.wiktionary.org/wiki/szilva[languages]. It turns out that French is the most incomplete. The Hungarian is probably the best average choice.

A link validity check makes the link to Wiktionary appear if valid.

This is an option, disabled by default for saving queries on a mobile device.

Because of potential high number of cards, there is no check until the card detail appears. The check occurs in background using `XmlHttpRequest` but not in the Worker, which would make the update difficult.

There is a map for every card telling if the check did occur, and its success. Even better: use browser's local storage to keep this on the long term.


== Support mobile devices

There is no intent to develop a mobile app, mobile support occurs only through HTML and JavaScript.

Loading the whole application from a website it acceptable, but what about the offline mode? Should we store something? Luckily the http://www.thecssninja.com/javascript/how-to-create-offline-webapps-on-the-iphone[offline mode] exists, thanks to http://appcachefacts.info[caching] .

A nice mobile-specific feature would be an "invert color" to support dark background.

There are tons of crappy vocabulary-learning apps. Among the less stupid:

* http://www.appolicious.com/education/apps/497630-vocab-junkie-bold-learning-solutions-inc[Vocab Junkie]
* http://itunes.apple.com/fr/app/vocabulary-trainer/id436103462[Vocabulary Trainer]
* http://itunes.apple.com/fr/app/vocabulary-trainer-english/id377911662[Vocabulary Trainer: English - Hungarian]

Vocab Pro HD mentions the http://itunes.apple.com/fr/app/vocab-pro-hd/id497950298[ProVoc File Format] .
ProVoc is a binary format, so it is not easy as Szótárgép. And it seems abandoned.



== Deck: showing some cards more often

The detail view enables a "deck" button that includes current pair into the list of items to repeat.

When current item is already in the deck, the "deck" button becomes something like "undeck".

The deck is a "special" tag at the top of the list. Selecting it deselect all other tags.



== Multilingual user interface

Would look serious while this doesn't seem to be such important.



== Typographic tricks

Replace `_` by non-breakable space at rendering time.



== Print enhancements

Insert URL (along with current content-aware URL) as a QR code.

There are means to generate QR codes http://jeromeetienne.github.com/jquery-qrcode[offline with JavaScript].


== Still no stats

Stats are a bottomless hole for development and make people stupid.


== Summary of controls

Top-level buttons:

* All
* None
* Next
* Add to Deck/Remove from Deck
* List view/Card view
* Invert

Settings:

* Skin (day, night)
* Wiktionary links (yes, no)
* Button to clear Wiktionary link cache.
* Language (French, English, Hungarian)




== Rearchitecture code

Make the application one single object handling its own state, and delegating rendering to a specific "interface" (a set of callback) for easier testing.

Use a JavaScript worker for rendering tasks. The worker has a simple interface passing only serializable objects (Strings).

Use the word "card" (instead of current "equivalence").


=== Logic encapsulation

Main object containing the whole logic could be instantiated like this (simulating private scope):
http://stackoverflow.com/a/1597560/1923328

About object instantiation, see also:
http://pivotallabs.com/javascript-constructors-prototypes-and-the-new-keyword
http://ejohn.org/blog/simple-class-instantiation/#postcomment


=== Separate list of vocabulary files

Such format would be more comfortable than HTML to edit, and it would dissociate technical features from vocabulary changes:

----
my/file1=File one
my/other/file=File two
----

Unix line feeds preferred but regex should easily support usual suspects: `\r\n?|\n` .


=== Use a real parser

ANTLR is the boss. It would raise nice errors instead of silently failing like regex does.

Guys http://stackoverflow.com/questions/2540429/antlr-javascript-target[say] that ANTLR-3.3 is getting it right.


=== Error feedback for broken files

Because of tags files no longer have obvious visual counterpart.

Instead, a link "There are errors" unfolds the whole list with file name and details (like file not found or parsing errors).


=== Parallel DOM computation

The worker endorses all DOM computations for:

* List of tags.
* Current cards.

Each click on a button triggers an asynchronous request with button name, then starts a fade out of the current cards. At the end of the fade out, the new DOM fragment may be already available. If it is not, there are chances that the computation will take a long and it's time to show a spinning wheel. Ideally there are smooth transitions for everything.

The fadeout:

* Gives immediate feedback on user's action so he's less tempted to click again.
* Gives some time to the worker to perform its computation before starting the spinning wheel. When switching simple cards, the spinning wheel would appear in an unpleasant blink.



== Glossary

"Equivalence" sucks.

The real word for a dictionary entry seems to be "entry" (at least in a hardcover Harrap's Shorter) which is "article" in French.

"Card" is not so bad.

Wikipedia/Wiktionary use "article".


How to describe the line-column system inside an "entry"?


